// Code generated by go-bindata.
// sources:
// template/.gitignore
// template/.vscode/launch.json
// template/.vscode/tasks.json
// template/backendServer.go
// template/middleware/core.go
// template/spa/.babelrc
// template/spa/.eslintrc.js
// template/spa/.gitignore
// template/spa/jsconfig.json
// template/spa/package.json
// template/spa/src/ExampleComponent/ExampleComponent.js
// template/spa/src/ExampleComponent/ExampleComponentActions.js
// template/spa/src/ExampleComponent/exampleComponentReducer.js
// template/spa/src/app/App.js
// template/spa/src/app/configureStore.js
// template/spa/src/app/reducers.js
// template/spa/src/index.ejs
// template/spa/webpack.config.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2c\x2e\x4e\x2d\x29\xd6\x07\x04\x00\x00\xff\xff\x8e\xad\xaa\x73\x07\x00\x00\x00")

func GitignoreBytes() ([]byte, error) {
	return bindataRead(
		_Gitignore,
		".gitignore",
	)
}

func Gitignore() (*asset, error) {
	bytes, err := GitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitignore", size: 7, mode: os.FileMode(420), modTime: time.Unix(1463395755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _VscodeLaunchJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xc1\x8a\xc3\x20\x10\x86\xef\x79\x8a\x20\x7b\x5c\x42\x92\xdd\x65\x61\x9f\x61\x0f\xcb\x5e\x4b\x0e\x36\x99\x9a\xd0\xea\xa4\xa3\xa6\x14\xf1\xdd\xab\xa6\xe4\x60\x3a\x5e\x86\xff\xfb\x3f\x05\x5d\x51\x86\x61\x0b\x90\x9e\x50\xb1\x9f\x92\xd5\x55\x5b\xd5\xec\x7d\xcd\x7b\x54\xa7\x49\x58\xe2\x26\x50\x1d\xf0\x21\xe5\x71\xdc\xb6\xa5\xa6\xe2\x12\xa2\xfe\xcb\xad\xea\xc7\xa7\xbf\x51\x73\x9f\x13\x15\x98\x13\x82\xab\x05\x6d\x22\xbc\xbc\x54\x25\x0e\x49\x1d\xe0\x68\xc5\xde\x96\x68\xe0\x8f\x9b\x31\x56\x72\x3a\x23\xc5\x8b\xdb\x8f\xcf\xaf\x8c\x8c\xb8\x3e\xd9\xb4\xdf\x55\x1d\x4e\xb3\x53\x09\x05\x71\x19\x3b\x6f\xee\x86\x74\xd6\x33\xef\xe1\x1f\xd1\xf8\xbc\x0a\x6a\x09\x35\xe7\xb3\x98\x93\x48\x1f\xd6\x6d\xb1\x4f\x5b\x57\xf8\x47\x00\x00\x00\xff\xff\x09\x8d\x90\xac\x75\x01\x00\x00")

func VscodeLaunchJsonBytes() ([]byte, error) {
	return bindataRead(
		_VscodeLaunchJson,
		".vscode/launch.json",
	)
}

func VscodeLaunchJson() (*asset, error) {
	bytes, err := VscodeLaunchJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".vscode/launch.json", size: 373, mode: os.FileMode(420), modTime: time.Unix(1463395755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _VscodeTasksJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\x31\x4f\xc3\x40\x0c\x85\xf7\xfc\x0a\xeb\x86\x4e\x25\x2a\x2b\x5b\x61\x07\xa4\xb2\xa1\x0e\x26\xb9\x36\x27\x2e\x77\xd6\xf9\x8e\x0a\x45\xf9\xef\x9c\xdd\x42\x05\x08\x86\x2e\x89\xf3\x9e\xfd\xfc\xc9\x99\x1a\x00\xf3\x66\x13\xbb\x18\xcc\x0d\x98\x55\x7b\xdd\xae\xcc\x52\xd4\x2e\x8e\x23\x86\x5e\xd4\x17\xe4\xe1\x28\x3a\xde\x0c\xd6\xfb\xbb\x2f\x2f\xa7\x62\xd5\xe1\x21\x1e\x1e\x4a\xa6\x92\x65\x02\xfd\x01\xdf\xf9\x38\x83\x69\xcf\x55\x7b\xae\x75\xfd\xba\xea\x4c\x2d\xb6\xea\x64\xe4\xd7\xb3\x35\xe9\xf3\x24\xdf\xe3\x68\x25\x68\x1f\x21\x95\xa0\x41\xea\x71\x21\x4a\x96\xf9\xe9\xdc\xf3\x89\xa0\xbe\xe3\xdb\xe2\x7c\xff\x1b\x50\xdd\x6f\x28\xaa\xd4\x7c\x17\x38\xa3\xf7\xb0\x58\xc0\x34\xb5\x6b\x22\xc9\x9d\x67\x73\x6a\xda\xea\x7b\x5e\xfe\xcd\xa8\x1b\x61\xf3\xb8\x86\x5d\x4c\x40\x29\xf6\xa5\xcb\x72\xd0\xcb\xa9\x77\xe8\xf9\x1f\x6c\xf9\x3d\x3d\x30\xa1\x40\x07\x1a\xe5\x46\xba\xf8\x07\xb4\x5c\xba\x99\x9b\x8f\x00\x00\x00\xff\xff\x40\x8f\xb1\x2b\xe6\x01\x00\x00")

func VscodeTasksJsonBytes() ([]byte, error) {
	return bindataRead(
		_VscodeTasksJson,
		".vscode/tasks.json",
	)
}

func VscodeTasksJson() (*asset, error) {
	bytes, err := VscodeTasksJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".vscode/tasks.json", size: 486, mode: os.FileMode(420), modTime: time.Unix(1463395755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _backendserverGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8f\xc1\x6a\xf3\x30\x10\x84\xcf\xd6\x53\xec\xbf\xf0\x83\x04\x25\xc9\xb1\xa4\xe4\x10\x5a\xd2\x1e\x42\x09\xf4\xda\x8b\x1a\xaf\x1d\x51\x59\x32\xd2\x3a\x2d\x18\xbf\x7b\xd7\x0a\x25\xcd\x49\xcc\xf0\x69\x66\xb6\xb7\xc7\x4f\xdb\x12\x74\xd6\x05\xa5\x5c\xd7\xc7\xc4\xa0\x55\x85\x3e\xb6\x28\x4f\x20\x5e\x9e\x98\x7b\x54\x22\xc6\x71\xf1\x1c\x0f\x96\x4f\x87\x44\x8d\xfb\x9e\xa6\xa5\x38\xdb\xbe\x7f\xb5\x1d\x89\xe8\x5c\x5d\x7b\xfa\xb2\x89\x50\x19\xa5\x9a\x21\x1c\x4b\xae\x36\x30\xaa\x6a\x4e\x59\xbc\xd8\x20\x88\xc6\x25\xde\xc1\x15\xff\xb5\x83\xf3\x37\xf6\x21\xb9\xc0\xfb\xd8\xde\x98\x6f\x94\xce\xb4\x73\x9e\xf2\x2e\xc5\xee\xc9\x25\x8d\x36\x67\xe2\x8c\xc6\x48\x6b\x25\xc3\x2f\x1f\x7d\xd0\x58\xe0\x04\x2e\x83\xfd\x88\x03\x03\x47\xf0\x2e\x33\x05\xb0\x0c\xe5\xd6\xfb\xd5\x6a\xb5\xc0\xf9\xa3\x6b\x80\x52\x82\xf5\x06\xca\xd4\x7d\xe1\xb6\xa1\x2e\x19\x1a\xd7\x33\x29\xb3\x65\xa4\x79\x28\xe4\xbf\xcd\x2c\xe6\xdb\xae\xa5\x8d\xc6\xc7\x38\xf8\x1a\x42\x64\xc8\x6c\xa5\x21\x5f\x36\xfc\x2d\x5c\xc3\xff\xf3\x7b\x90\x30\x89\x31\xaa\x9a\xd4\xa4\x7e\x02\x00\x00\xff\xff\x92\x23\x3c\xa6\x89\x01\x00\x00")

func backendserverGoBytes() ([]byte, error) {
	return bindataRead(
		_backendserverGo,
		"backendServer.go",
	)
}

func backendserverGo() (*asset, error) {
	bytes, err := backendserverGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "backendServer.go", size: 393, mode: os.FileMode(420), modTime: time.Unix(1463395755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _middlewareCoreGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x61\x6b\xdb\x30\x10\xfd\x1c\xff\x8a\x5b\x20\xcc\x2e\x99\xc3\xbe\x76\xf4\xc3\x58\x57\x56\x28\x5b\x49\x3b\xf6\x61\x8c\xa2\xda\xe7\x58\xc4\x91\x5c\xe9\xdc\x34\x94\xfc\xf7\xdd\x49\x4e\xe2\x6c\x1d\x14\x16\x68\xe3\x9c\x75\xef\xde\x7b\x7a\x52\xab\x8a\xa5\x5a\x20\xac\x74\x59\x36\xb8\x56\x0e\x93\x44\xaf\x5a\xeb\x08\xd2\x64\x34\x6e\xec\x62\xcc\x5f\x06\x69\x56\x13\xb5\xf2\x6c\xbd\xfc\xaf\x56\x34\x4e\xb2\x24\x99\xcd\xe0\x5c\x91\x82\xc2\x36\x0d\x16\xe4\x41\x35\x0d\x94\x52\x71\xf8\xd0\x69\x87\x25\x90\x85\x7b\x84\x56\x79\xcf\x3f\x54\x63\xcd\x02\x8a\x5a\x69\xc3\xbf\x0e\x53\xa1\xea\x4c\x41\xda\x1a\x9f\x27\xb4\x69\x31\xa2\x7a\x72\x5d\x41\xf0\x9c\x6c\xc3\xa4\x2f\xca\xf0\x72\x07\x25\x56\xdc\xee\x81\x6a\x84\xb0\xd8\x56\x2f\x42\xf1\x02\x45\x50\x28\x23\x04\xfa\x99\x3d\xfc\x0e\x4a\xd6\xa6\x81\xef\x89\x4c\x9c\xc2\x1a\x44\x68\x3e\x47\xdf\x32\x02\xfe\x70\x9a\xd0\x4d\xc1\xc1\x49\x5f\x7f\xe8\xd0\x53\x06\xe8\x9c\x75\x03\x56\x40\x6a\xc9\x94\x0a\x21\xc0\x74\xc2\x34\xcd\x52\x07\xbc\xea\x38\xd3\x83\x36\x81\xfa\x42\x3f\xa2\x01\xeb\x4a\x74\x79\x22\x44\x7a\xa8\x23\x3e\xfb\xa6\x3c\xcf\x7b\xd2\x59\xa4\xb8\x93\xf0\x9c\x8c\x1c\x52\xe7\xcc\x51\xf9\x42\x84\x05\x75\xaf\x55\xc4\x38\xa3\xca\x3a\xb8\xdb\x0f\x85\xd3\x33\x70\xca\x2c\x06\xd4\x65\xd1\x88\xb5\xcb\xab\xbe\x18\xe8\xb2\x71\x0c\x99\xc9\x5b\x5d\x89\x39\xf0\xe6\x0c\x8c\x6e\x62\xc3\x88\x73\x94\x5f\x3b\x6d\xa8\x4a\xc7\xb7\x35\xb2\x19\x6b\xc5\x59\x31\xd1\xc6\x53\x98\x3c\x8e\xa7\xf2\x1c\x00\x7a\x39\xf2\xb8\x4d\xc2\xdf\x36\xeb\x13\x70\x83\xee\x11\x2f\x74\x83\xfe\xc2\xd9\xd5\xb9\x76\xe0\xa5\xe2\xa1\x92\x1a\x54\x5c\x1c\x58\x5b\x72\xfe\x0a\xb2\x6e\x93\x4b\xef\x6d\xad\xd9\x7a\x0f\xec\x03\x16\x9a\x73\xba\x01\x83\x58\xc6\x84\x06\x18\x07\x12\x52\x0e\xb1\xd8\xa0\x60\x8e\x8a\xc3\xa7\xda\x36\xe6\xa8\xf3\x3c\xc1\x49\xed\x9d\xb3\x1d\xc9\xa6\x31\xea\x65\xc5\x2b\x65\xba\x40\xdf\xa3\x6c\xb9\xf2\x4b\x06\x15\x8c\xd0\x57\x5a\xf4\xe6\x2d\x01\x3e\x69\x4f\xd0\xd6\x1b\xaf\x8b\x30\xdd\x0a\x43\xbf\x9c\x72\x1e\x4a\x7c\xca\x6b\x5a\x35\x02\x12\xd5\x4b\x52\x19\xfe\x1b\xab\x71\x6b\xed\x71\x7a\x34\x1a\xd6\xb6\x6b\x4a\x41\x5d\x5b\xb7\xe4\x89\x8c\xce\xaa\x88\xbb\x00\x62\x96\xfe\xb2\x2a\xdd\xdb\x21\xe7\x8a\x89\x66\x70\x88\x10\xf0\xa7\x4f\xd1\xff\x1d\x89\x1e\x4b\x3e\x22\xe8\x52\xa4\x09\x0b\x09\x0c\x5f\x1a\xf9\x4d\xdb\xc7\x60\xe2\x67\x07\xdd\xbc\xfb\x7b\x76\xd9\x1e\xc0\x45\x64\x2c\x05\xe0\x13\x73\xd5\x4c\xeb\x45\xa4\x89\x1f\x22\x30\xb7\xfc\xfb\xfc\x2a\xbf\x56\x54\xff\x7c\x7f\xfa\x8b\xef\xa9\x1d\x24\x87\xf3\x2e\x24\x4d\x50\xac\xcf\x6f\x48\x51\xfa\xf2\x9c\xec\x83\x2c\xb8\xf4\x5f\x2d\x7d\x96\xad\x4b\x25\x9f\x03\x79\x51\x22\x1b\xb0\x77\x3a\x95\x33\x30\x3d\xd6\x7d\x50\xb3\x05\x6c\x3c\xbe\x06\xe0\x1f\x7c\x0e\x48\xc9\xc0\xa2\xb0\x67\x7c\xd2\x92\xf8\x26\x9e\x93\x70\xd6\xae\xec\xd1\xf5\x13\xec\xf2\xd0\x48\x15\xbd\xe7\x5b\x3f\x06\x9d\x63\x55\xef\x46\xf6\xf7\xd0\xae\xfd\x55\x31\xc0\x87\x3f\x83\x20\x4e\xc5\x34\xec\xfc\x1a\x9e\xff\x89\x87\xb0\x5d\xdc\x28\xbb\x14\x1f\xe6\xb8\xb2\x84\x1f\xcb\xd2\x65\x83\x2c\x8a\x9a\xdf\x01\x00\x00\xff\xff\x79\x36\x7e\x45\xa2\x06\x00\x00")

func middlewareCoreGoBytes() ([]byte, error) {
	return bindataRead(
		_middlewareCoreGo,
		"middleware/core.go",
	)
}

func middlewareCoreGo() (*asset, error) {
	bytes, err := middlewareCoreGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "middleware/core.go", size: 1698, mode: os.FileMode(420), modTime: time.Unix(1463395755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _spaBabelrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x00\x02\xa5\x82\xa2\xd4\xe2\xd4\x92\x62\x25\x2b\x85\x68\xb0\x00\x58\x30\xb5\xd8\xc8\xc0\xd0\x54\x49\x07\x21\x52\x94\x9a\x98\x5c\xa2\x04\xe6\xc7\x72\xd5\x72\x01\x02\x00\x00\xff\xff\xf9\x8f\xf4\x3c\x3d\x00\x00\x00")

func spaBabelrcBytes() ([]byte, error) {
	return bindataRead(
		_spaBabelrc,
		"spa/.babelrc",
	)
}

func spaBabelrc() (*asset, error) {
	bytes, err := spaBabelrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spa/.babelrc", size: 61, mode: os.FileMode(420), modTime: time.Unix(1463395755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _spaEslintrcJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\x41\x6f\xfa\x30\x0c\xc5\xef\xfd\x14\xc8\xe7\x7f\xff\x93\xa6\x69\x07\xa6\x5d\x27\xed\xc4\xc4\x76\x43\x3b\xa4\xad\x85\xc2\x52\x27\x73\x1c\x28\x42\x7c\xf7\xa5\x69\x81\x96\x55\x23\x27\xf2\x9c\xf7\xc3\x7e\x75\x6d\xab\x60\xf0\x3f\x36\xce\xb2\xf8\xd9\xf3\xec\x90\xcd\xe2\x01\x8e\xaa\x87\x79\x7f\x4d\x92\xa6\x0a\x49\xa2\xb6\x3a\x6b\xed\xb9\xff\x37\xba\x3e\x9c\x6f\x9f\x97\x02\x7c\x07\x2b\x89\xf7\xa7\x17\xbc\xa6\xb5\x41\x98\x44\x18\x4d\x58\x30\xaa\xaf\xdc\xcb\x3e\x3e\xba\xc5\x0a\xa4\x9b\x69\x92\xc7\x5a\xdf\xb4\x2b\xb3\x53\x7b\x3f\x0d\x20\x9b\x07\x0a\x1e\xab\x7c\xab\xf8\xe6\x54\x07\x68\x5f\xbd\xae\xc9\x32\xbe\x29\x11\x64\x8a\x16\x58\xa2\x2a\x05\x8e\x97\x3f\x48\xbf\x8e\x9d\x17\x90\xb6\xe3\xf4\xd1\x3f\x46\x41\x38\xe0\xa0\x91\x82\xed\xce\x23\xf7\x85\x31\xa0\x11\xa4\xaa\x6d\x2e\x5a\x63\x76\x32\x67\x2c\x6d\x5d\x47\x11\x2b\xe8\x1f\x39\x13\xd6\x9a\xc6\x13\x00\xa7\xc6\xb2\xc1\xd0\x03\xd8\x6a\x92\x76\x22\xcd\x93\xf7\x6e\x58\x3b\x21\x5c\xcc\x20\x75\x0a\x85\x2a\xd0\xe4\x1d\x06\x46\xd5\x85\x13\x6d\xe9\x6a\xed\xbc\x0d\x5c\xe2\xc7\xde\xb5\x9f\x1c\xba\x7d\x85\x41\x06\x58\xd6\xea\x05\x95\x04\xbe\x5a\xd8\x54\xdd\xf8\xe6\x57\x6c\xfd\x48\x0e\x59\xc7\x26\x45\x99\x45\xb1\xc1\x52\x96\xe8\xe5\xdd\xc5\x09\xaa\x61\x9e\x29\xd3\x2e\xd9\xec\xf8\x94\xfd\x04\x00\x00\xff\xff\x98\x02\x55\x47\x30\x03\x00\x00")

func spaEslintrcJsBytes() ([]byte, error) {
	return bindataRead(
		_spaEslintrcJs,
		"spa/.eslintrc.js",
	)
}

func spaEslintrcJs() (*asset, error) {
	bytes, err := spaEslintrcJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spa/.eslintrc.js", size: 816, mode: os.FileMode(420), modTime: time.Unix(1463395755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _spaGitignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\xcb\x4f\x49\x8d\xcf\xcd\x4f\x29\xcd\x49\x2d\xd6\xe7\x02\x04\x00\x00\xff\xff\xaa\xa6\x03\x89\x0e\x00\x00\x00")

func spaGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_spaGitignore,
		"spa/.gitignore",
	)
}

func spaGitignore() (*asset, error) {
	bytes, err := spaGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spa/.gitignore", size: 14, mode: os.FileMode(420), modTime: time.Unix(1463395755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _spaJsconfigJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x8f\xc1\x6a\x03\x21\x10\x86\xcf\xeb\x53\x88\xe7\x12\x7b\x69\x42\x03\xa5\x97\x5e\x02\x85\x1e\x72\x2c\x65\x31\xee\xec\xc6\x8d\x3a\xa2\x23\xdb\x52\xf2\xee\x1d\x93\xed\x45\xc6\x8f\xff\xff\x1c\x7f\x45\xa7\xb5\x3c\x02\xc8\x33\x51\x2a\x7b\xad\x27\xdc\x04\x67\x33\x16\x1c\x69\x63\x31\xe8\x71\xf1\x2e\x5e\xf4\xeb\x3b\x9f\x87\xe1\x65\xf7\xf4\xbc\xdd\x3d\xde\x6a\x23\x66\x49\x67\x90\x03\xda\x1a\x20\x92\x21\x87\x51\x9a\x13\x56\xba\xf1\xb9\x58\x8c\xa3\x9b\x36\x73\x61\xce\xe9\x60\x48\x74\x8a\xa5\xc9\x79\xc8\x1f\xa9\xe5\x8b\xda\x4b\xde\xa2\x53\x64\xf2\x04\xc4\x37\x05\x65\xab\x1e\x1a\x0a\x38\x54\x0f\x0d\x71\x27\x60\x9c\xcb\x9d\x1b\xef\x71\x39\xfe\x44\x7e\x84\x9c\x7d\x83\xd1\x54\x4f\x87\x90\x30\x53\xd3\x51\xae\x20\xba\x2b\x47\x15\x7c\x5b\x5f\x87\xa6\xf8\x6c\xc5\x88\x03\xf4\x77\xeb\xaa\x3a\xe1\x02\xb9\x6f\x2b\x61\xe4\x2f\xac\x74\x2e\x29\xf4\xc9\xd8\x8b\x99\xfe\x83\x14\xd2\x3a\x00\x4f\xa2\xfb\x12\x57\xf1\x17\x00\x00\xff\xff\x3a\x81\x01\x49\x3e\x01\x00\x00")

func spaJsconfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_spaJsconfigJson,
		"spa/jsconfig.json",
	)
}

func spaJsconfigJson() (*asset, error) {
	bytes, err := spaJsconfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spa/jsconfig.json", size: 318, mode: os.FileMode(420), modTime: time.Unix(1463395755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _spaPackageJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x4d\x4b\x03\x31\x10\x86\xef\xfd\x15\x61\xcf\x26\x6c\xb6\x1f\x8a\xe0\xa1\xb6\x22\x82\x78\x51\xaf\x85\x34\x19\xec\xd2\x6d\x12\xf2\xd1\x0a\x75\xff\xbb\xd9\x34\xdb\x74\x8b\x1e\x33\xcf\x33\x33\x99\xf7\x38\x42\xa8\x90\x6c\x07\xc5\x3d\x2a\x8e\x47\x32\xd7\xfa\x2d\xbc\xd0\x0f\xfa\x50\xaf\xea\x00\x66\xc1\x2c\xb4\x6d\x71\xd3\x79\x7b\x30\xb6\x56\xb2\x53\x29\x29\x49\x79\xaa\x0a\xb0\xdc\xd4\xda\x25\x72\x1a\xb2\xcc\xc5\xbe\xfb\x54\xb0\xc1\xe9\x96\xc6\xc6\x7d\xd7\xb0\x7c\x7a\xfc\x7c\x7e\x70\xc6\x03\x3a\xc0\x5a\x33\xbe\x45\xf8\x10\x5b\x82\xa3\x8d\x12\x9d\x74\x26\xba\x08\xa0\x8d\x03\x99\x77\x1b\x65\xf2\xce\x79\x7c\xf7\xeb\x9a\x9a\x83\xb4\xf1\xae\x97\xf7\x45\xff\xd5\xfd\x12\x34\x48\x01\x92\xd7\x70\xf1\x95\x35\x5b\x43\x83\xb9\x32\xd1\x5f\xcd\xc8\x5d\xba\xee\xcc\x1a\xc5\x04\x98\x44\x2b\x32\x19\x52\x6d\xc0\x82\xc3\x60\xab\x92\x4e\x93\x34\xbb\x1e\x91\x24\x03\x8c\xbb\xe4\x4c\xb3\xb3\x71\xbb\x06\xa7\x33\xb1\x6e\xfc\x57\x1d\xe3\x5c\x55\x84\xde\x66\x2b\x09\x91\x50\x42\xc7\x81\x9c\xf3\x10\x7f\x9e\x96\xd7\xd1\xb0\x8d\x54\xfd\xa4\x58\xc7\x42\xed\xfe\x65\x06\x84\xff\x8e\x74\x42\x26\x64\x7a\x05\x95\x77\x29\x8f\x90\x46\xfe\xe0\x25\x1d\x4c\x28\x73\x66\xb9\x3c\x0e\x09\x54\x83\x32\x76\x1b\x2f\xb7\xfd\xe5\xe9\xbc\x51\x3b\xfa\x0d\x00\x00\xff\xff\x69\x15\x4c\xba\xa9\x02\x00\x00")

func spaPackageJsonBytes() ([]byte, error) {
	return bindataRead(
		_spaPackageJson,
		"spa/package.json",
	)
}

func spaPackageJson() (*asset, error) {
	bytes, err := spaPackageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spa/package.json", size: 681, mode: os.FileMode(420), modTime: time.Unix(1463395755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _spaSrcExamplecomponentExamplecomponentJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x54\xcd\x8e\xdb\x20\x10\xbe\xfb\x29\x46\xea\x61\x9d\x2a\xb5\xef\x9b\x1f\xa9\x4a\x7b\xaf\xd2\x7d\x01\x16\x4f\xb4\xa8\x36\x50\x18\x56\xa9\x2c\xbf\x7b\xc1\x40\x42\xe2\xdd\x6b\xe6\x90\x88\xf9\xfd\xe6\xe3\xc3\x62\xd0\xca\x10\x1c\x91\x71\x5a\xc3\x08\xbf\x8c\xd2\x2f\xff\x34\x5a\x98\xe0\x64\xd4\x00\x4f\x26\x84\x9e\x36\x55\xca\x1c\x81\x2b\x29\x91\xd3\x6d\xc2\x37\x83\x9d\x3b\x5f\xd3\xbe\x02\xb3\xe0\xfd\x42\x49\x9b\xf2\x9a\xf6\xe7\x99\x0d\xba\xc7\x83\xf2\x39\x12\x25\x7d\x8f\x71\x5f\x55\xb5\xad\xef\x9b\xdc\xa0\x99\xef\xf0\xe5\x11\x56\xe1\x79\x86\xcb\x7b\x66\x2d\xdc\xe3\x03\x3c\x13\xca\xce\x46\x7a\x9a\xab\x7f\xac\xc0\x9b\x27\xc2\x92\x71\x9c\x94\xa9\xb5\xe7\xcd\xae\x52\x20\x98\x75\x1a\xb3\x7b\x33\x7b\xa7\x6a\xfe\x33\xbe\xa3\x8f\x94\xb9\x06\xc9\x19\x59\x5f\xce\xc1\xb6\x9d\x78\xdf\xdf\x78\x82\x1d\x94\x93\x84\x06\xde\x59\xef\xf0\x19\x46\x7a\x13\xb6\x99\x87\x34\x3c\x86\xa6\x45\xcd\xf6\xd5\x11\x29\x09\x4a\x1e\x7a\xc1\xff\xec\x46\x3f\x7b\xb7\x87\xb9\xd4\x38\x99\x96\x8e\x77\x51\xaf\xa6\xfd\xd1\xc9\x74\x73\xdb\x36\x96\xde\xe2\xd8\xb6\x37\xd0\x2e\xdb\x85\xdf\xb8\xe1\xa2\x69\xb1\x6b\x81\x78\x99\x97\x5b\x79\xaa\xee\xef\x62\xae\x89\xca\xdc\x5d\xf8\x9f\x37\x7e\xbe\x8a\xb6\x91\x6e\x78\x45\xd3\x08\x7b\xc4\xbf\x4e\x78\x4d\xae\x3f\x44\x54\x96\x9c\x9c\xe4\x45\x41\x35\x65\x35\x4a\x62\x42\x7a\xae\x1f\xa8\xc6\x80\x25\xe0\x83\x81\xe9\xdf\xc4\x08\x5f\x54\x00\x6a\x6b\x1b\x0e\x99\xc6\x28\x97\x82\xd3\x0b\x11\x73\x5a\x83\x71\xd5\xac\x88\xc8\xe9\x26\x90\x5a\xf6\xff\x21\xac\x66\xc4\xdf\xf2\x88\x2e\x9d\x3f\x9d\xb2\x24\x31\x0a\x29\x17\xd6\xe9\xb9\xe7\xf9\xf9\x52\x57\x05\x80\xf4\xdc\x3a\x3c\x31\xd7\x53\xfe\x94\xd4\x77\xeb\xae\x3f\xc0\xb7\xaa\xef\x15\xe1\xd5\xf2\x3f\x00\x00\xff\xff\x25\x91\xf4\xac\xbe\x04\x00\x00")

func spaSrcExamplecomponentExamplecomponentJsBytes() ([]byte, error) {
	return bindataRead(
		_spaSrcExamplecomponentExamplecomponentJs,
		"spa/src/ExampleComponent/ExampleComponent.js",
	)
}

func spaSrcExamplecomponentExamplecomponentJs() (*asset, error) {
	bytes, err := spaSrcExamplecomponentExamplecomponentJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spa/src/ExampleComponent/ExampleComponent.js", size: 1214, mode: os.FileMode(420), modTime: time.Unix(1463395755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _spaSrcExamplecomponentExamplecomponentactionsJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xad\x28\xc8\x2f\x2a\x51\x48\xce\xcf\x2b\x2e\x51\x08\x0a\xf5\x8b\x77\x8d\x70\xf4\x0d\xf0\x71\x8d\x77\x74\x0e\xf1\xf4\xf7\x53\xb0\x55\x50\xc7\x14\x55\xb7\xe6\xe2\x82\x6a\x4c\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x48\xad\x48\xcc\x2d\xc8\x49\x75\x04\xf3\x34\x34\x15\xaa\xb9\x14\x80\xa0\x28\xb5\xa4\xb4\x28\x0f\xca\x01\x81\x92\xca\x82\x54\x2b\x2c\x16\x81\x15\xd4\x5a\x73\xd5\x72\x01\x02\x00\x00\xff\xff\x09\x95\xfd\x8c\x92\x00\x00\x00")

func spaSrcExamplecomponentExamplecomponentactionsJsBytes() ([]byte, error) {
	return bindataRead(
		_spaSrcExamplecomponentExamplecomponentactionsJs,
		"spa/src/ExampleComponent/ExampleComponentActions.js",
	)
}

func spaSrcExamplecomponentExamplecomponentactionsJs() (*asset, error) {
	bytes, err := spaSrcExamplecomponentExamplecomponentactionsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spa/src/ExampleComponent/ExampleComponentActions.js", size: 146, mode: os.FileMode(420), modTime: time.Unix(1463395755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _spaSrcExamplecomponentExamplecomponentreducerJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\x31\x4f\xc3\x30\x14\x84\x77\xff\x8a\xdb\x9a\x8a\x2a\xc0\xda\x8a\x21\xaa\x32\x20\x41\x8b\x0a\x48\x6c\x95\x71\x5f\xc0\x28\xb1\x23\xfb\x59\x14\x45\xfe\xef\x04\x27\x44\xd0\xbe\xc5\xcf\xbe\xf3\x77\x3a\xdd\xb4\xd6\x31\xba\xdd\xf3\x66\x5f\xbe\x14\xf7\x0f\x77\xe5\xbe\x58\x3f\xdd\x6e\x37\x11\x95\xb3\x0d\x66\xf9\x65\x79\x94\x4d\x5b\xd3\xda\xf6\x5e\x43\x86\x0b\xc5\xda\x1a\x3f\x5b\x09\xa1\xfa\x93\xa1\x8d\x66\x2d\xeb\x47\x96\x4c\xb8\x41\x27\xd0\x8f\xb2\xc1\x30\xb9\x25\xae\x44\xec\x9d\x74\x4c\x41\x07\xaa\x64\xa8\x19\x55\x30\x89\x02\x3a\x81\xef\xe8\x10\x14\xb9\xcc\x8f\xb0\xbf\xec\x05\x64\xfa\x34\x1f\x23\xfc\xa7\x66\xf5\x9e\x0d\x8f\x39\x7f\xb5\xf4\xab\x28\xe9\x09\xe7\x9d\x96\x49\xfc\x19\x47\x1c\x9c\xc1\xf6\xf5\x83\x14\xe7\xd2\x7b\xfd\x66\xb2\x2e\x2e\xe0\x87\xa0\x6e\x72\xfe\xeb\x92\xd4\x7c\xbc\xe2\x02\xd7\x93\x2d\xce\x57\xd3\x9e\x96\xb1\xe9\x59\x64\x42\x0c\xde\x28\xa2\xf8\x0e\x00\x00\xff\xff\x12\x0c\xa9\x0c\x81\x01\x00\x00")

func spaSrcExamplecomponentExamplecomponentreducerJsBytes() ([]byte, error) {
	return bindataRead(
		_spaSrcExamplecomponentExamplecomponentreducerJs,
		"spa/src/ExampleComponent/exampleComponentReducer.js",
	)
}

func spaSrcExamplecomponentExamplecomponentreducerJs() (*asset, error) {
	bytes, err := spaSrcExamplecomponentExamplecomponentreducerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spa/src/ExampleComponent/exampleComponentReducer.js", size: 385, mode: os.FileMode(420), modTime: time.Unix(1463395755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _spaSrcAppAppJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x52\x4d\x6f\x83\x30\x0c\xbd\xf7\x57\xf8\x06\x48\x14\x7e\x40\x9b\x1e\xb6\x55\xda\x0e\xd3\xa6\xee\xb0\x73\x07\x6e\x8b\x54\x62\x64\xc2\xd6\x0a\xf5\xbf\x2f\x24\xe1\x2b\xeb\xb8\xc4\x79\x7e\x7e\xf1\xb3\x29\xca\x8a\x58\xc1\x0e\xf7\x99\x82\x03\x53\x09\x01\x77\x71\xb0\x5a\x4c\x53\x4f\x6f\xaf\xd3\xec\x32\xa7\x72\x64\xb4\xf0\xce\xf4\x5d\xe4\xc8\x70\x9b\xb1\x18\xf3\xe6\x32\xe5\xed\xa8\x51\xc8\xb1\x3d\x63\xf8\x62\xfa\xa9\x91\x9f\x8b\x5a\x11\x5f\xfd\x62\xc3\x9d\x56\xd7\x57\x99\x39\xee\x67\xa1\x4e\x1f\x3a\xc0\xbb\x45\xc3\xc3\x7d\xed\xf6\xb2\x2f\xab\x33\x3e\x92\xbe\x4a\x94\xbd\xd3\x24\x49\xfd\xcc\x1f\x60\x6c\x20\x23\x79\x28\x8e\x0d\xa3\x7d\xd8\x49\xa4\x73\xb8\x7b\x54\x23\xb5\x82\xda\xb0\x84\x57\x16\x46\x2b\x97\x3f\x39\xd7\xe2\xae\xaf\x70\x3e\x9b\xd8\xca\x45\x83\xfa\x8e\x48\x8d\x76\x04\x84\x11\x88\x0d\xb4\x0b\xd0\x1f\xa3\x6a\x58\x42\x68\x2e\xdd\xb7\x1e\xf6\x63\x54\x44\x6b\x8e\xdb\x66\x20\x18\x92\x5d\x4e\xdf\x97\x68\x5d\xe0\xd1\xe6\x74\xa8\xf6\xea\x24\x82\x34\xd0\x36\x5d\x33\xa2\xf5\x47\xf8\x9f\x42\x6a\x24\xbc\x2e\x2c\xc8\x23\xba\x4e\xfb\xee\x2d\xa6\x67\x70\xd3\x63\xe8\x7f\xcb\x84\x51\xea\x9c\x35\xbb\x9e\x8f\x25\xdd\xc4\x06\xce\x29\x6b\x4a\x0d\x24\x47\x54\xdb\x33\x76\xe1\xc3\xf5\x25\x0f\x83\x92\x1a\xa9\x96\x15\x15\x7a\xcf\xd1\x42\x2b\xff\x06\x00\x00\xff\xff\x64\x92\x83\xfe\x0f\x03\x00\x00")

func spaSrcAppAppJsBytes() ([]byte, error) {
	return bindataRead(
		_spaSrcAppAppJs,
		"spa/src/app/App.js",
	)
}

func spaSrcAppAppJs() (*asset, error) {
	bytes, err := spaSrcAppAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spa/src/app/App.js", size: 783, mode: os.FileMode(420), modTime: time.Unix(1463395755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _spaSrcAppConfigurestoreJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\xc1\x4e\x03\x21\x10\x86\xef\x3c\xc5\xdc\x0a\xc9\x5a\xef\x36\xd5\x93\x47\x2f\xd6\xc4\x33\x81\xc1\x12\x29\xb3\x19\x06\x77\x4d\xd3\x77\x97\xdd\xb6\x71\x35\x29\x37\xe6\xff\x66\xf8\x98\x78\xe8\x89\x05\x8e\xe0\x18\xad\xe0\x4e\x88\xb1\x03\xdb\xf7\xe9\xfb\x25\x7a\x9f\x70\xb0\x53\xc1\x51\xe3\x0a\xc2\x09\x02\xd3\x01\x56\x8c\xbe\x8e\xab\x8d\xba\xb4\xcb\xbe\xe6\xcf\x65\x74\x37\x57\x1a\x70\x25\x98\x48\x5e\x5b\xe2\x90\x2f\xdc\xfa\x9e\xcf\xf7\x32\x61\x8e\x72\x91\xa5\xc4\x7b\x94\xfd\xaf\x01\x6c\xaf\x0a\xfa\x9f\x9b\x56\xd0\xce\xfc\x9c\x32\x1d\x0c\x31\x7b\x1a\xd6\x1e\xbf\xde\x88\x52\x79\x1e\x05\x73\x89\x94\xe1\xe9\x66\xa4\x0d\x3c\x40\x80\xed\x23\x04\xa3\x17\x06\xa6\x69\xe1\x38\xdb\x7b\x0c\xb6\x26\x81\x50\xb3\x93\x69\x5a\xd3\x0d\xf1\xa3\xf2\x99\xd4\x31\x47\x89\x36\xed\xa4\xf5\x1a\x38\xce\x4a\x8c\x52\x39\xdf\xfe\x92\x5e\xac\xa4\x83\x3f\x13\x36\xea\xa4\x7e\x02\x00\x00\xff\xff\xc8\xb8\x9e\x43\x99\x01\x00\x00")

func spaSrcAppConfigurestoreJsBytes() ([]byte, error) {
	return bindataRead(
		_spaSrcAppConfigurestoreJs,
		"spa/src/app/configureStore.js",
	)
}

func spaSrcAppConfigurestoreJs() (*asset, error) {
	bytes, err := spaSrcAppConfigurestoreJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spa/src/app/configureStore.js", size: 409, mode: os.FileMode(420), modTime: time.Unix(1463395755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _spaSrcAppReducersJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8f\x4d\xaa\x83\x30\x14\x85\xe7\x59\xc5\x9d\xf9\x1e\x54\x9d\x2b\x1d\x95\x6e\xa0\x3b\x48\xe3\xb5\x04\x4c\xae\x5c\x13\x08\x88\x7b\x6f\xfc\x89\x54\x41\x67\x26\xdf\x77\xce\x89\x36\x3d\xb1\x83\x11\x14\x99\xb7\xb6\xf8\xc2\xc6\x2b\xe4\x01\x26\x68\x99\x0c\x64\x1c\x0f\x42\x56\x8b\x1d\x64\xf2\x0e\x79\xe3\x7e\x30\xa9\x5c\xbe\xde\xe5\xc9\x49\x12\x06\x69\xfa\x0e\x1f\x14\x7f\x2d\x5a\x97\xe4\x55\x2d\x8a\xf2\x79\x02\xca\x0b\x63\xce\x54\x64\x07\x17\x57\xd0\x1e\x73\x3f\x8f\xff\x1b\x05\xc4\x6f\x0b\xa9\xae\xfa\x6f\x0b\x35\x6f\xd6\xf6\x53\x1d\x1f\x26\xa6\xff\xd8\x85\x61\xd9\xdf\x60\x2b\x7d\x77\x28\xad\xc5\x37\x00\x00\xff\xff\x7c\x22\x9b\x6a\x3a\x01\x00\x00")

func spaSrcAppReducersJsBytes() ([]byte, error) {
	return bindataRead(
		_spaSrcAppReducersJs,
		"spa/src/app/reducers.js",
	)
}

func spaSrcAppReducersJs() (*asset, error) {
	bytes, err := spaSrcAppReducersJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spa/src/app/reducers.js", size: 314, mode: os.FileMode(420), modTime: time.Unix(1463395755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _spaSrcIndexEjs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8e\x3f\x0f\xc2\x20\x10\xc5\x77\x3f\x05\x92\x74\x6c\xbb\x3a\x5c\x59\xd4\xd9\x0e\x26\xc6\x91\x16\x94\x8b\xfc\x8b\x3d\x4c\xfc\xf6\x12\x88\x5a\x16\xee\xcf\x7b\xbf\x77\xb0\x3d\x9c\xf6\xe7\xeb\x78\x64\x86\x9c\x15\x1b\xa8\x1f\xcb\x0f\x8c\x96\xaa\x96\xa5\x75\x9a\x24\x9b\x8d\x7c\x2e\x9a\x06\x9e\xe8\xd6\xee\xf8\x6a\x4d\x48\x56\x0b\x68\x86\x42\xba\xe8\x29\xca\xf9\x31\xda\x74\x47\xdf\x85\x48\x18\xfc\xd2\x15\x0d\x6b\x04\xf4\x55\x5d\x73\xfa\x7f\x10\x4c\x41\xbd\x57\x50\x85\x2f\x86\x6a\xe0\x2e\x24\x4f\x6d\x0c\xe8\x89\x67\x77\x1e\x7f\xbd\xd5\x90\x19\xbf\xbb\x3f\x01\x00\x00\xff\xff\x6a\x2f\x5a\xef\xd3\x00\x00\x00")

func spaSrcIndexEjsBytes() ([]byte, error) {
	return bindataRead(
		_spaSrcIndexEjs,
		"spa/src/index.ejs",
	)
}

func spaSrcIndexEjs() (*asset, error) {
	bytes, err := spaSrcIndexEjsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spa/src/index.ejs", size: 211, mode: os.FileMode(420), modTime: time.Unix(1463395755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _spaWebpackConfigJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x52\x4d\x8f\xd3\x30\x10\xbd\xe7\x57\xf8\x80\xe4\x54\x34\xce\xbd\x15\x07\x50\x2b\x10\x87\x2e\x12\x02\x0e\xb0\xaa\xdc\x64\xd2\x1a\x1c\xdb\xf8\xa3\xbb\xab\x2a\xff\x9d\x71\x6c\xba\x69\x3a\x87\x24\xf6\x7b\x93\x79\x33\x6f\x1a\xad\x9c\x27\x9f\x7c\x2f\x7f\xc0\xc1\xf0\xe6\xcf\x17\x19\x8e\x42\x91\x77\xc4\xc2\xdf\x20\x2c\x94\xf4\x84\x60\xf5\x94\xd0\xca\x8c\x30\x5d\xac\x8b\x94\x99\xef\xa7\xfc\x7c\x15\x39\x99\x84\xcf\x4e\x1c\x91\x73\x29\x08\x06\x28\x6f\x5f\x56\xe4\xe7\x78\x88\x41\x59\xed\x6c\x53\x73\x63\xea\xf7\xc6\xb0\xdf\x8e\x8e\xd0\xe3\x72\x7c\xe9\xe0\x4d\xf0\xab\x9c\x1c\xa3\x13\x12\x14\xef\x61\x45\xa8\x50\x2d\x3c\xef\x0f\x41\xb5\x12\x62\xe2\xf2\x4a\x32\xdc\x9f\x56\x64\xbf\x6f\x85\x8d\x5c\xf2\x96\xd0\x9a\xb1\x9a\x3b\x07\x3e\x17\x18\x12\xbb\xd7\x6d\x90\x30\x2d\x20\x35\x6f\xc1\x3a\xd4\xf8\x7a\x17\xc3\x83\x43\x21\xf5\x2f\xac\xf4\xa6\x5e\xde\x40\x42\x35\x32\xb4\x30\xaf\x88\x7d\xd1\x5b\x62\xfa\x37\x4a\x3f\xf0\x03\xc8\x2a\x1d\xe9\x95\x32\x5c\xbf\x1e\xa7\x1a\xd3\xdc\xdd\x74\x6a\x0a\x9e\xee\x8d\x2b\x67\x82\x85\x8f\x9d\xd1\xcb\x85\xe1\x64\x77\xa8\x6a\x18\x66\x7a\x3c\xf4\x46\x72\x1f\x59\xd1\x84\x71\xa0\x0c\xfe\x7b\x30\x4a\x58\x24\x3b\x8a\x01\x1d\x15\x5d\x69\xac\x6e\xc0\x39\x06\xea\xcc\x36\xdb\x0f\xdf\x3e\x2e\xf2\xe8\x92\xcf\xac\x85\xb3\xd7\x5a\xa2\xdf\x14\xce\x5c\x56\x4e\x07\xdb\x40\xd5\x73\x43\xd7\xc5\x40\x40\x3a\xb8\x4d\xc8\xcd\x31\x13\xdc\xa9\x8c\x6d\xe5\x15\x62\x1b\xe8\x84\x82\xbb\xce\xe8\x44\x01\x9d\xfa\x36\x82\xbb\x87\xcd\x76\xbf\xdd\x7d\x47\xe4\xf3\xd7\x87\x1d\x73\xde\x0a\x75\x14\xdd\x4b\x19\xf3\xda\xd0\x78\xa1\x71\x83\x67\x13\x1f\x16\xb8\xaf\x43\x51\xa4\x65\x60\xf0\x6c\xb4\xf5\x0e\x7b\x48\x1a\xd7\xc5\xbf\x00\x00\x00\xff\xff\xa9\x35\xd9\x9a\x2a\x03\x00\x00")

func spaWebpackConfigJsBytes() ([]byte, error) {
	return bindataRead(
		_spaWebpackConfigJs,
		"spa/webpack.config.js",
	)
}

func spaWebpackConfigJs() (*asset, error) {
	bytes, err := spaWebpackConfigJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "spa/webpack.config.js", size: 810, mode: os.FileMode(420), modTime: time.Unix(1463401174, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitignore": Gitignore,
	".vscode/launch.json": VscodeLaunchJson,
	".vscode/tasks.json": VscodeTasksJson,
	"backendServer.go": backendserverGo,
	"middleware/core.go": middlewareCoreGo,
	"spa/.babelrc": spaBabelrc,
	"spa/.eslintrc.js": spaEslintrcJs,
	"spa/.gitignore": spaGitignore,
	"spa/jsconfig.json": spaJsconfigJson,
	"spa/package.json": spaPackageJson,
	"spa/src/ExampleComponent/ExampleComponent.js": spaSrcExamplecomponentExamplecomponentJs,
	"spa/src/ExampleComponent/ExampleComponentActions.js": spaSrcExamplecomponentExamplecomponentactionsJs,
	"spa/src/ExampleComponent/exampleComponentReducer.js": spaSrcExamplecomponentExamplecomponentreducerJs,
	"spa/src/app/App.js": spaSrcAppAppJs,
	"spa/src/app/configureStore.js": spaSrcAppConfigurestoreJs,
	"spa/src/app/reducers.js": spaSrcAppReducersJs,
	"spa/src/index.ejs": spaSrcIndexEjs,
	"spa/webpack.config.js": spaWebpackConfigJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".gitignore": &bintree{Gitignore, map[string]*bintree{}},
	".vscode": &bintree{nil, map[string]*bintree{
		"launch.json": &bintree{VscodeLaunchJson, map[string]*bintree{}},
		"tasks.json": &bintree{VscodeTasksJson, map[string]*bintree{}},
	}},
	"backendServer.go": &bintree{backendserverGo, map[string]*bintree{}},
	"middleware": &bintree{nil, map[string]*bintree{
		"core.go": &bintree{middlewareCoreGo, map[string]*bintree{}},
	}},
	"spa": &bintree{nil, map[string]*bintree{
		".babelrc": &bintree{spaBabelrc, map[string]*bintree{}},
		".eslintrc.js": &bintree{spaEslintrcJs, map[string]*bintree{}},
		".gitignore": &bintree{spaGitignore, map[string]*bintree{}},
		"jsconfig.json": &bintree{spaJsconfigJson, map[string]*bintree{}},
		"package.json": &bintree{spaPackageJson, map[string]*bintree{}},
		"src": &bintree{nil, map[string]*bintree{
			"ExampleComponent": &bintree{nil, map[string]*bintree{
				"ExampleComponent.js": &bintree{spaSrcExamplecomponentExamplecomponentJs, map[string]*bintree{}},
				"ExampleComponentActions.js": &bintree{spaSrcExamplecomponentExamplecomponentactionsJs, map[string]*bintree{}},
				"exampleComponentReducer.js": &bintree{spaSrcExamplecomponentExamplecomponentreducerJs, map[string]*bintree{}},
			}},
			"app": &bintree{nil, map[string]*bintree{
				"App.js": &bintree{spaSrcAppAppJs, map[string]*bintree{}},
				"configureStore.js": &bintree{spaSrcAppConfigurestoreJs, map[string]*bintree{}},
				"reducers.js": &bintree{spaSrcAppReducersJs, map[string]*bintree{}},
			}},
			"index.ejs": &bintree{spaSrcIndexEjs, map[string]*bintree{}},
		}},
		"webpack.config.js": &bintree{spaWebpackConfigJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

